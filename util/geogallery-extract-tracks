#!/usr/bin/env node

/**
 * This script will go through one or more paths given as arguments, look for supported GPS track files, and output
 * their processed contents as JSON.
 *
 * Read-only script, only writes to stdout.
 *
 * @example $ geogallery-extract-tracks path/to/gpx > tracks.json
 */

var fs = require('fs');
var path = require('path');

var inputPaths = process.argv.slice(2);

if (inputPaths.length) {
    try {
        console.log(JSON.stringify(processFiles(inputPaths), null, 4));
    } catch (err) {
        console.error(err);
    }
} else {
    throw new Error('Please provide one or more input paths as arguments');
}

function processFiles(fromPaths) {
    return listFiles(fromPaths).map(function(fileName) {
        return {
            date: path.basename(fileName, path.extname(fileName)),
            segments: getSegments(fileName)
        };
    });
}

function listFiles(fromPaths) {
    return fromPaths.reduce(function(memo, fromPath) {
        return memo.concat(fs.readdirSync(fromPath).map(function(fileName) {
            return path.join(fromPath, fileName);
        }));
    }, []);
}

function getSegments(fromGpxFile) {
    return (fs.readFileSync(fromGpxFile) + '')
        .split(/<\/trk>\s*<trk>/) // yes, I'm "parsing" XML with a regex, deal with it
        .map(function(segmentString) {
            return {
                type: segmentString.match(/<name>\d+ (.*?)<\/name>/)[1],
                points: segmentString.match(/<trkpt [^>]+>/g).map(function(trkptString) {
                    return [
                        parseFloat(trkptString.match(/lat="(\d+\.\d+)"/)[1]),
                        parseFloat(trkptString.match(/lon="(\d+\.\d+)"/)[1])
                    ];
                })
            };
        });
}
